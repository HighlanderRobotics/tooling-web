generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model Person {
  id                           String               @id @default(cuid())
  name                         String
  email                        String
  role                         Role                 @default(STUDENT)
  permissions                  Permission[]
  teamAffiliated               Boolean              @default(false)
  labCertification             LabCertification?
  quizSubmissions              QuizSubmission[]
  attendanceLogEntries         AttendanceLogEntry[] @relation(name: "PersonAttendanceLogEntries")
  inputtedAttendanceLogEntries AttendanceLogEntry[] @relation(name: "PersonInputtedAttendanceLogEntries")
  badges                       Badge[]
  profileImageUrl              String?

  @@unique([email])
}

enum Role {
  STUDENT
  MENTOR
  SUPERVISOR
  OTHER
}

model LabCertification {
  personId                       String  @id
  person                         Person  @relation(fields: [personId], references: [id], onDelete: Cascade)
  safetyQuiz                     Boolean @default(false)
  labLayoutEmergencyPreparedness Boolean @default(false) @map("emergencyPreparedness")
}

model QuizSubmission {
  id             String   @id @default(cuid())
  submitter      Person?  @relation(fields: [submitterId], references: [id], onDelete: Cascade)
  submitterId    String?
  submitterEmail String? // This isn't redundant. Sometimes submitters are not in the database yet.
  timestamp      DateTime @default(now())
  quizType       QuizType
  answers        String
  score          Int
  maxScore       Int
}

enum QuizType {
  SAFETY_QUIZ
  LAB_LAYOUT_EMERGENCY_PREPAREDNESS
}

enum AttendanceLogEntrySource {
  KIOSK
  DASHBOARD
}

model AttendanceLogEntry {
  id          String                   @id @default(cuid())
  personId    String
  person      Person                   @relation(name: "PersonAttendanceLogEntries", fields: [personId], references: [id], onDelete: Cascade)
  timestamp   DateTime
  includeTime Boolean                  @default(false)
  source      AttendanceLogEntrySource
  enteredBy   Person?                  @relation(name: "PersonInputtedAttendanceLogEntries", fields: [enteredById], references: [id], onDelete: Cascade)
  enteredById String?
}

model Badge {
  id      String @id @default(cuid())
  ownerId String
  owner   Person @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  payload String @unique
}

model Permission {
  id       String  @id @default(cuid())
  path     String
  Person   Person? @relation(fields: [personId], references: [id], onDelete: Cascade)
  personId String?

  @@unique([personId, path])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
